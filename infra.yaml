---
AWSTemplateFormatVersion: '2010-09-09'
Description: Demo1 infrastructure

Parameters:

  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 10.0.2.0/24
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 10.0.3.0/24
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 10.0.4.0/24
    Description: CidrBlock for private subnet 02 within the VPC

  NodeGroupMinSize:
    Type: Number
    Description: Minimum size of CPU Node Group.
    Default: 1

  NodeGroupMaxSize:
    Type: Number
    Description: Maximum size of CPU Node Group.
    Default: 4

  NodeGroupDesireSize:
    Type: Number
    Description: Desire size of CPU Node Group.
    Default: 2  

  NodeGroupInstanceType:
    Type: String
    Description: CPU Node Group instance type.
    Default: t2.medium

  KubernetesVersion:
    Type: String
    Description: Kubernets version
    Default: "1.25"

  # SSHKeyName:
  #   Type: String
  #   Description: SSH Key Name
  #   Default: "eks-poc"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'eks-vpc'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'eks-public-rt'
        - Key: Network
          Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'eks-private-rt1'
        - Key: Network
          Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'eks-private-rt2'
        - Key: Network
          Value: Private02

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#  PrivateRoute01:
#    DependsOn:
#      - VPCGatewayAttachment
#      - NatGateway01
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable01
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway01

#  PrivateRoute02:
#    DependsOn:
#      - VPCGatewayAttachment
#      - NatGateway02
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable02
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway02

#  NatGateway01:
#    DependsOn:
#      - NatGatewayEIP1
#      - PublicSubnet01
#      - VPCGatewayAttachment
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
#      SubnetId: !Ref PublicSubnet01
#      Tags:
#        - Key: Name
#          Value: 'eks-natgateway-1'

#  NatGateway02:
#    DependsOn:
#      - NatGatewayEIP2
#      - PublicSubnet02
#      - VPCGatewayAttachment
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
#      SubnetId: !Ref PublicSubnet02
#      Tags:
#        - Key: Name
#          Value: 'eks-natgateway-2'

#  NatGatewayEIP1:
#    DependsOn:
#      - VPCGatewayAttachment
#    Type: 'AWS::EC2::EIP'
#    Properties:
#      Domain: vpc

#  NatGatewayEIP2:
#    DependsOn:
#      - VPCGatewayAttachment
#    Type: 'AWS::EC2::EIP'
#    Properties:
#      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'eks-public-subnet-1'

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'eks-public-subnet-2'

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'eks-private-subnet-1'

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'eks-private-subnet-2'

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'eks-sg'
      GroupDescription: "Limits security group inbound traffic"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: "0"
          ToPort: "65535"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'eks-sg'

  EKSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  EKSWorkerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  EKSRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "eks-policy"
      Roles:
        - !Ref EKSRole
        - !Ref EKSWorkerRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "elasticloadbalancing:*"
            Resource: "*"
          # - Effect: "Allow"
          #   Action: "elasticloadbalancing:SetIpAddressType"
          #   Resource: "*"
          - Effect: "Allow"
            Action: "ec2:*"
            Resource: "*"
          # - Effect: "Allow"
          #   Action: "ec2:DescribeAddresses"
          #   Resource: "*"
          # - Effect: "Allow"
          #   Action: "ec2:DescribeAccountAttributes"
          #   Resource: "*"
          - Effect: "Allow"
            Action: "cloudwatch:PutMetricData"
            Resource: "*"

  EKSWorkerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EKSWorkerRole

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "ci-cd-demo1"
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !GetAtt EKSClusterSecurityGroup.GroupId
        SubnetIds:
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
          
#  OIDCProvider:
#    Type: "AWS::IAM::OIDCProvider"
#    Properties:
#      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
#      ClientIDList:
#        - sts.amazonaws.com

  NodeGroup:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      AmiType: "AL2_x86_64"
      CapacityType: "ON_DEMAND"
      ClusterName: !Ref EKSCluster
      NodegroupName: "eks-ng"
      NodeRole: !GetAtt EKSWorkerRole.Arn
      InstanceTypes:
        - !Ref NodeGroupInstanceType
      ScalingConfig:
        DesiredSize: !Ref NodeGroupDesireSize
        MinSize: !Ref NodeGroupMinSize
        MaxSize: !Ref NodeGroupMaxSize
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02

  JenkinsKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: jenkins-key
      PublicKeyMaterial: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDaNF3HtKqT0oZjxzuWj/LnXhTXQJry59TFcsW5G05tmQ9YxuTtvkxe6jqVshrab9p2rZtU6k6T73rLNeFoQ82pvLrhfT3MkoWZfu8qgIZL/w0RIeIkLd5fg/mh3RvUxxbVWtJ1pblZXdGwVjj7erbKRpxPdSaOhqotQ5UXCW7uC5j8EVOmbNfCNBJX1Aa7o1Wf8+9ahcH3ydE+MlAAx0WeULhmxYv3XMZAL2v9HqSI+NRSRsKl+uGK+gpjM1XrZshtz31ThZo2zJ3tYpLx9TzpG5RI083CEEwDUqXJ0Qj0/ntrKPnIpW5KLOC9Rv11dfkOyqoJnFV+udEN6tp1q12pPbNFq3BBYtzgEo9R1T4xxkxMCKxveTg0FqFYGtM+aPpEt04yozIrhXVUMfQ2pdUGKN8R9XKjlX1RHkPoF17vQV4JPgWfyWcshmzpYOG8Ez6mIbqRkzZLZ3rJQNDE7jrWpA3NjTa0aeY11PbrdiJhBzkXl2pwCpVAgt3bDljoZC0= shubham.chaudhari@gmail.com

  JenkinsInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - NodeGroup
    Properties:
      IamInstanceProfile: !Ref EKSWorkerInstanceProfile
      InstanceType: t3a.medium
      ImageId: ami-008d819eefb4b5ee4
      KeyName: !Ref JenkinsKeyPair
      SecurityGroupIds:
        - !GetAtt EKSClusterSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet01
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 40
          VolumeType: gp2
          DeleteOnTermination: true       
      UserData:
        Fn::Base64: |
          #!/bin/bash

          apt-get update -y
          apt-get install fontconfig openjdk-17-jre -y
          apt-get install python3-pip unzip jq -y
          pip3 install urllib3
          pip3 install jinja-cli

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
         
          curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
          echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]  https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
          apt-get update -y

          echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
          echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
          echo "net.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.conf
          echo "net.ipv6.conf.eth0.disable_ipv6 = 1" >> /etc/sysctl.conf
          sysctl -p
          cat /proc/sys/net/ipv6/conf/all/disable_ipv6

          apt-get install jenkins -y
          systemctl enable jenkins
          systemctl start jenkins

          #FIRST
          url=http://localhost:8080
          password=$(sudo cat /var/lib/jenkins/secrets/initialAdminPassword)
          username=$(python3 -c "from urllib.parse import quote; print(quote('admin'))")
          new_password=$(python3 -c "from urllib.parse import quote; print(quote('admin'))")
          fullname=$(python3 -c "from urllib.parse import quote; print(quote('Shubham Chaudhari'))")
          email=$(python3 -c "from urllib.parse import quote; print(quote('hello@world.com'))")
          cookie_jar="$(mktemp)"
          full_crumb=$(curl -u "admin:$password" --cookie-jar "$cookie_jar" $url/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\))
          arr_crumb=(${full_crumb//:/ })
          only_crumb=$(echo ${arr_crumb[1]})
          curl -X POST -u "admin:$password" $url/setupWizard/createAdminUser \
                  -H "Connection: keep-alive" \
                  -H "Accept: application/json, text/javascript" \
                  -H "X-Requested-With: XMLHttpRequest" \
                  -H "$full_crumb" \
                  -H "Content-Type: application/x-www-form-urlencoded" \
                  --cookie $cookie_jar \
                  --data-raw "username=$username&password1=$new_password&password2=$new_password&fullname=$fullname&email=$email&Jenkins-Crumb=$only_crumb&json=%7B%22username%22%3A%20%22$username%22%2C%20%22password1%22%3A%20%22$new_password%22%2C%20%22%24redact%22%3A%20%5B%22password1%22%2C%20%22password2%22%5D%2C%20%22password2%22%3A%20%22$new_password%22%2C%20%22fullname%22%3A%20%22$fullname%22%2C%20%22email%22%3A%20%22$email%22%2C%20%22Jenkins-Crumb%22%3A%20%22$only_crumb%22%7D&core%3Aapply=&Submit=Save&json=%7B%22username%22%3A%20%22$username%22%2C%20%22password1%22%3A%20%22$new_password%22%2C%20%22%24redact%22%3A%20%5B%22password1%22%2C%20%22password2%22%5D%2C%20%22password2%22%3A%20%22$new_password%22%2C%20%22fullname%22%3A%20%22$fullname%22%2C%20%22email%22%3A%20%22$email%22%2C%20%22Jenkins-Crumb%22%3A%20%22$only_crumb%22%7D"

          #SECOND
          plugins_array=('jenkins-design-language' 'pipeline-stage-tags-metadata' 'antisamy-markup-formatter' 'structs' 'durable-task' 'workflow-multibranch' 'github' 'javax-mail-api' 'echarts-api' 'blueocean-jwt' 'plugin-util-api' 'scm-api' 'kubernetes-cli' 'mina-sshd-api-common' 'mina-sshd-api-core' 'commons-text-api' 'github-api' 'pipeline-groovy-lib' 'ssh-credentials' 'matrix-project' 'font-awesome-api' 'display-url-api' 'workflow-step-api' 'pipeline-github-lib' 'variant' 'okhttp-api' 'branch-api' 'checks-api' 'kubernetes-client-api' 'mailer' 'blueocean-pipeline-scm-api' 'jackson2-api' 'cloudbees-folder' 'credentials-binding' 'jakarta-activation-api' 'pipeline-model-api' 'jjwt-api' 'instance-identity' 'commons-lang3-api' 'blueocean-core-js' 'pipeline-model-extensions' 'workflow-basic-steps' 'workflow-scm-step' 'pipeline-input-step' 'pipeline-stage-step' 'blueocean-github-pipeline' 'workflow-job' 'token-macro' 'pipeline-stage-view' 'snakeyaml-api' 'bootstrap5-api' 'blueocean-rest' 'bouncycastle-api' 'git' 'workflow-api' 'blueocean-rest-impl' 'apache-httpcomponents-client-4-api' 'ionicons-api' 'jaxb' 'jquery3-api' 'jakarta-mail-api' 'plain-credentials' 'blueocean-commons' 'pipeline-build-step' 'htmlpublisher' 'favorite' 'pipeline-model-definition' 'workflow-durable-task-step' 'workflow-cps' 'pipeline-rest-api' 'javax-activation-api' 'workflow-aggregator' 'git-client' 'script-security' 'pipeline-graph-analysis' 'authentication-tokens' 'trilead-api' 'blueocean-git-pipeline' 'pubsub-light' 'github-branch-source' 'blueocean-web' 'kubernetes-credentials' 'junit' 'workflow-support' 'blueocean-pipeline-api-impl' 'credentials' 'pipeline-milestone-step' 'caffeine-api' 'docker-workflow')
          for plugin in "${plugins_array[@]}"; do
            curl -u admin:admin http://localhost:8080/jnlpJars/jenkins-cli.jar --output jenkins-cli.jar
            java -jar jenkins-cli.jar -s http://admin:admin@localhost:8080/ install-plugin $plugin
          done
          echo "FINISHED PLUGIN INSTALLATION @@@@@@@"

          #THIRD
          password="admin"
          user="admin"
          public_ip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
          url="http://${public_ip}:8080"
          url_urlEncoded=$(python3 -c "from urllib.parse import quote; print(quote('${url}'))")
          cookie_jar="$(mktemp)"
          full_crumb=$(curl -u "$user:$password" --cookie-jar "$cookie_jar" $url/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\))
          arr_crumb=(${full_crumb//:/ })
          only_crumb=$(echo ${arr_crumb[1]})
          curl -X POST -u "$user:$password" $url/setupWizard/configureInstance \
            -H 'Connection: keep-alive' \
            -H 'Accept: application/json, text/javascript, */*; q=0.01' \
            -H 'X-Requested-With: XMLHttpRequest' \
            -H "$full_crumb" \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -H 'Accept-Language: en,en-US;q=0.9,it;q=0.8' \
            --cookie $cookie_jar \
            --data-raw "rootUrl=$url_urlEncoded%2F&Jenkins-Crumb=$only_crumb&json=%7B%22rootUrl%22%3A%20%22$url_urlEncoded%2F%22%2C%20%22Jenkins-Crumb%22%3A%20%22$only_crumb%22%7D&core%3Aapply=&Submit=Save&json=%7B%22rootUrl%22%3A%20%22$url_urlEncoded%2F%22%2C%20%22Jenkins-Crumb%22%3A%20%22$only_crumb%22%7D"


          apt-get install docker.io -y

          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

          usermod -aG docker jenkins
          chown root:docker /var/run/docker.sock
          systemctl restart jenkins

          wget https://github.com/aquasecurity/trivy/releases/download/v0.46.0/trivy_0.46.0_Linux-64bit.deb
          dpkg -i trivy_0.46.0_Linux-64bit.deb

          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.19.3 TARGET_ARCH=x86_64 sh -
          cd istio-1.19.3
          chmod 777 bin/istioctl
          
          while true
          do
              sleep 10
              aws eks update-kubeconfig --name ci-cd-demo1  --region us-east-1
              if [[ $? -eq 0 ]]; then
                  sleep 10
                  aws eks update-kubeconfig --name ci-cd-demo1  --region us-east-1
                  break 
              else
                 echo "EKS CLUSTER IS NOT READY !!!!!!!"
              fi
          done

          bin/istioctl install --set profile=demo -y
          kubectl label namespace default istio-injection=enabled
